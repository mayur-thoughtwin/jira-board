generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              BigInt        @id @default(autoincrement())
  first_name      String
  last_name       String
  email           String        @unique
  password        String        
  is_active       Boolean       @default(true)
  role            Role
  job_title       String?
  department      String?
  organization    String?
  delete_flag     Boolean       @default(false)
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt

  projectsLed     Project[]    @relation("ProjectLead")
  createdTickets  Ticket[]     @relation("CreatedBy")
  assignedTickets TicketData[] @relation("Assignee")
  reportedTickets TicketData[] @relation("Reporter")
  collaborators    UserCollaborator[] @relation("UserCollaboratorUser")
  collaboratedWith UserCollaborator[] @relation("UserCollaboratorCollaborator")
}

model UserCollaborator {
  id              BigInt @id @default(autoincrement())

  user            User   @relation("UserCollaboratorUser", fields: [user_id], references: [id])
  user_id         BigInt

  collaborator    User   @relation("UserCollaboratorCollaborator", fields: [collaborator_id], references: [id])
  collaborator_id BigInt

  created_at      DateTime @default(now())

  @@unique([user_id, collaborator_id]) // Prevent duplicate entries
}




model Project {
  id                  BigInt          @id @default(autoincrement())
  name                String
  project_key         String          @unique
  icon                String?
  project_category    ProjectCategory? @relation(fields: [project_category_id], references: [id])
  project_category_id BigInt?
  project_lead        User            @relation("ProjectLead", fields: [project_lead_id], references: [id])
  project_lead_id     BigInt
  delete_flag         Boolean         @default(false)
  created_at          DateTime        @default(now())
  updated_at          DateTime        @updatedAt

  tickets      Ticket[]
  sprints      Sprint[]
  backlogItems Backlog[]
}

model ProjectCategory {
  id          BigInt   @id @default(autoincrement())
  name        String   @unique
  description String?
  delete_flag Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  projects Project[]
}

model BoardStatus {
  id              BigInt         @id @default(autoincrement())
  name            String
  status_category StatusCategory
  delete_flag     Boolean        @default(false)
  created_at      DateTime       @default(now())
  updated_at      DateTime       @updatedAt

  tickets Ticket[]
}

model Ticket {
  id            BigInt      @id @default(autoincrement())
  ticket_key    String      @unique
  project       Project     @relation(fields: [project_id], references: [id])
  project_id    BigInt
  work_type     WorkType
  parent        Ticket?     @relation("TicketParent", fields: [parent_id], references: [id])
  parent_id     BigInt?
  children      Ticket[]    @relation("TicketParent")
  summary       String
  description   String?
  status        BoardStatus @relation(fields: [status_id], references: [id])
  status_id     BigInt
  created_by    User        @relation("CreatedBy", fields: [created_by_id], references: [id])
  created_by_id BigInt
  delete_flag   Boolean     @default(false)
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt

  ticketData  TicketData?
  backlogItem Backlog?
}

model TicketData {
  id              BigInt        @id @default(autoincrement())
  ticket          Ticket        @relation(fields: [ticket_id], references: [id])
  ticket_id       BigInt        @unique
  priority        Priority
  due_date        DateTime?
  assignee        User?         @relation("Assignee", fields: [assignee_id], references: [id])
  assignee_id     BigInt?
  reporter        User?         @relation("Reporter", fields: [reporter_id], references: [id])
  reporter_id     BigInt?
  estimate_points Int?
  sprint          Sprint?       @relation(fields: [sprint_id], references: [id])
  sprint_id       BigInt?
  labels          TicketLabel[] @relation("TicketDataLabels") // Fixed relation
}

model Sprint {
  id         BigInt       @id @default(autoincrement())
  name       String
  goal       String?
  project    Project      @relation(fields: [project_id], references: [id])
  project_id BigInt
  start_date DateTime
  end_date   DateTime
  status     SprintStatus
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt

  tickets TicketData[]
  backlog Backlog[]
}

model Backlog {
  id         BigInt   @id @default(autoincrement())
  ticket     Ticket   @relation(fields: [ticket_id], references: [id])
  ticket_id  BigInt   @unique
  project    Project  @relation(fields: [project_id], references: [id])
  project_id BigInt
  sprint     Sprint?  @relation(fields: [sprint_id], references: [id])
  sprint_id  BigInt?
  position   Int
  created_at DateTime @default(now())
}

model TicketLabel {
  id      BigInt       @id @default(autoincrement())
  name    String       @unique
  tickets TicketData[] @relation("TicketDataLabels") // Fixed relation
}

enum Role {
  ADMIN
  PROJECT_MANAGER
  DEVELOPER
  QA
  REPORTER
}

enum StatusCategory {
  TODO
  IN_PROGRESS
  DONE
}

enum WorkType {
  EPIC
  FEATURE
  BUG
  STORY
  TASK
  SUBTASK
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum SprintStatus {
  FUTURE
  ACTIVE
  COMPLETED
}
